% Ítem 1
% Parámetros del circuito
R = 220;       
L = 500e-3;    
C = 2.2e-6;    

% Definición del sistema en forma de ecuaciones de estado
A = [-R/L -1/L; 1/C 0];   
B = [1/L; 0];             
C_mat = [R 0];            
D = 0;                    

% Creación del sistema en espacio de estados
sys = ss(A, B, C_mat, D);

% Obtención de la función de transferencia a partir del sistema en espacio de estados
[num, den] = ss2tf(A, B, C_mat, D);
G = tf(num, den);         % Función de transferencia

% Cálculo de los polos del sistema
polos = pole(G);

% Se usa el valor absoluto de la parte real de los polos para comparar magnitudes
mod_polos = abs(real(polos));
polo_cercano = min(mod_polos);   % Polo con menor valor absoluto (dinámica lenta)
polo_lejano = max(mod_polos);    % Polo con mayor valor absoluto (dinámica rápida)

% Cálculo del tiempo asociado al 95% de la dinámica más rápida
% Se selecciona un tiempo de integración menor, por ejemplo, tres veces menor que tR
tR = -log(0.95)/abs(polo_lejano);

% Otra forma de calcular el paso de tiempo t_s es usando el período de oscilación
% del sistema amortiguado, dividido entre 100 puntos para buena resolución
Td = abs((2*pi/imag(min(polos)))/100);

% Cálculo de la constante de tiempo más lenta y tiempo para que la dinámica llegue al 5%
% Se toma un tiempo máximo tL, por ejemplo, tres veces mayor que ese valor
tL = -log(0.05)/abs(polo_cercano);

% Selección del paso de integración como el menor entre Td y tR/3
t_s = min(Td, tR/3);
t_max = 0.2;                % Tiempo total de simulación

% Número de puntos de simulación
np = t_max / t_s;

% Vector de tiempo para la simulación
t = linspace(0, t_max, np);

% Inicialización del vector de entrada (tensión), inicialmente en cero
u = linspace(0, 0, np);

vin = 12;                   % Amplitud inicial de la tensión de entrada

% Inicialización de condiciones iniciales para corriente y tensión en capacitor y resistencia
I(1) = 0;                   % Corriente inicial
VC(1) = 0;                  % Voltaje inicial en capacitor
VR(1) = 0;                  % Voltaje inicial en resistencia
x = [I(1); VC(1)];          % Vector de estado inicial
Xop = [0; 0];               % Punto de operación (origen)

ii = 0;                     % Contador para controlar el cambio de signo de la tensión

% Bucle de simulación
for i = 1:np-1
    ii = ii + t_s;          % Incremento del tiempo acumulado
    
    if ii >= 0.01           % Cada 10 ms se cambia el signo de la tensión
        ii = 0;             % Reinicio del contador
        vin = -vin;         % Cambio de signo de la tensión de entrada
    end
    
    u(i) = vin;             % Asignación de la tensión de entrada en el instante actual
    
    % Cálculo de la derivada del estado (ecuaciones de estado)
    xp = A * (x - Xop) + B * u(i);
    
    % Integración numérica con método de Euler
    x = x + xp * t_s;
    
    % Cálculo de la salida (tensión en la resistencia)
    Y = C_mat * x;
    
    % Guardar resultados para graficar
    VR(i+1) = Y(1);         % Voltaje en la resistencia
    I(i+1) = x(1);          % Corriente
    VC(i+1) = x(2);         % Voltaje en el capacitor
end

% Gráficos de resultados
figure('Name', 'Simulación Circuito RLC', 'NumberTitle', 'off');

subplot(4,1,1);
plot(t, u, 'g', 'LineWidth', 1.5);
title('Tensión de entrada u(t)');
xlabel('Tiempo [s]');
ylabel('Voltaje [V]');
grid on;

subplot(4,1,2);
plot(t, VC, 'b', 'LineWidth', 1.5);
title('Voltaje en el capacitor V_c(t)');
xlabel('Tiempo [s]');
ylabel('Voltaje [V]');
grid on;

subplot(4,1,3);
plot(t, I, 'r', 'LineWidth', 1.5);
title('Corriente en la malla i(t)');
xlabel('Tiempo [s]');
ylabel('Corriente [A]');
grid on;

subplot(4,1,4);
plot(t, VR, 'm', 'LineWidth', 1.5);
title('Voltaje en la resistencia V_R(t)');
xlabel('Tiempo [s]');
ylabel('Voltaje [V]');
grid on;


